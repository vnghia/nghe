name: Main

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
            command: cargo
          - target: aarch64-unknown-linux-gnu
            command: cross
          - target: x86_64-unknown-linux-musl
            command: cross
            platform: amd64
          - target: aarch64-unknown-linux-musl
            command: cross
            platform: arm64

    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"
      CROSS_CONTAINER_OPTS: "--network=host"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: md5
          POSTGRES_INITDB_ARGS: --auth-host=md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: cargo-bins/cargo-binstall@main

      - name: Install mold
        uses: rui314/setup-mold@v1
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}
      - name: Install nasm
        run: sudo apt-get --assume-yes install nasm
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}

      - name: Install aarch64 cross-compling tools
        run: sudo apt-get --assume-yes install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
        if: ${{ matrix.platform.target == 'aarch64-unknown-linux-gnu' }}

      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
        if: ${{ endsWith(matrix.platform.target, 'gnu') }}
      - name: Build ffmpeg
        run: cargo vcpkg --verbose build --target ${{ matrix.platform.target }} --manifest-path vcpkg/Cargo.toml
        if: ${{ endsWith(matrix.platform.target, 'gnu') }}

      - name: Install cross
        run: cargo binstall cross --no-confirm
        if: matrix.platform.command == 'cross'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ endsWith(matrix.platform.target, 'musl') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ endsWith(matrix.platform.target, 'musl') }}
      - name: Build ffmpeg musl
        uses: docker/build-push-action@v5
        if: ${{ endsWith(matrix.platform.target, 'musl') }}
        with:
          context: .
          file: vcpkg/alpine/Dockerfile
          build-args: ACTIONS_CACHE_URL,ACTIONS_RUNTIME_TOKEN
          network: host
          platforms: ${{ matrix.platform.platform }}
          tags: ffmpeg:${{ matrix.platform.platform }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and test
        run: ${{ matrix.platform.command }} test --locked --target ${{ matrix.platform.target }}

  build-windows:
    runs-on: windows-latest

    env:
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: ikalnytskyi/action-setup-postgres@v5
        id: postgres
      - name: Install libpq
        run: |
          vcpkg install libpq[core]:x64-windows-release
          cp "C:/vcpkg/installed/x64-windows-release/lib/*" "C:/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib/"
          cp "C:/vcpkg/installed/x64-windows-release/bin/*" "C:/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/bin/"

      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
      - name: Build ffmpeg
        run: cargo vcpkg --verbose build --target x86_64-pc-windows-msvc --manifest-path vcpkg/Cargo.toml

      - name: Build and test
        run: cargo test --locked --target x86_64-pc-windows-msvc
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14

    runs-on: ${{ matrix.platform.os }}

    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install postgres
        run: brew install postgresql@14
      - uses: ikalnytskyi/action-setup-postgres@v5
        id: postgres

      - name: Install nasm
        run: brew install nasm
      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
      - name: Build ffmpeg
        run: cargo vcpkg --verbose build --target ${{ matrix.platform.target }} --manifest-path vcpkg/Cargo.toml

      - name: Build and test
        run: cargo test --locked --target ${{ matrix.platform.target }}
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}
