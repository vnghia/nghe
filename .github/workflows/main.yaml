name: Main

permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  RUST_TOOLCHAIN: beta

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
            command: cargo
          - target: aarch64-unknown-linux-gnu
            command: cross
          - target: x86_64-unknown-linux-musl
            command: cross
          - target: aarch64-unknown-linux-musl
            command: cross

    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"
      CROSS_CONTAINER_OPTS: "--network=host"

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: md5
          POSTGRES_INITDB_ARGS: --auth-host=md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - uses: cargo-bins/cargo-binstall@main
      - name: Extract target information
        id: target
        env:
          TARGET: ${{ matrix.platform.target }}
        run: |
          echo "env=${TARGET##*-}" >> "$GITHUB_OUTPUT"
          echo "arch=$(echo $TARGET | awk '{print $1}')" >> "$GITHUB_OUTPUT"
          echo "docker-arch=${{ startsWith(matrix.platform.target, 'x86_64') && 'amd64' || 'arm64' }}" >> "$GITHUB_OUTPUT"
          echo "profile=dev" >> "$GITHUB_OUTPUT"
          echo "output-dir=debug" >> "$GITHUB_OUTPUT"

      - name: Setup x64 environment
        uses: rui314/setup-mold@v1
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}

      - name: Setup arm64 environment
        run: |
          sudo apt install --assume-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo ln -s ${{ github.workspace }}/vcpkg/cross-pkg-config /usr/bin/aarch64-linux-gnu-pkg-config
          aarch64-linux-gnu-pkg-config --version
        if: ${{ matrix.platform.target == 'aarch64-unknown-linux-gnu' }}

      - name: Setup x64 musl environment
        run: |
          sudo apt install --assume-yes musl-tools
          sudo ln -s ${{ github.workspace }}/vcpkg/cross-pkg-config /usr/bin/x86_64-linux-musl-pkg-config
          x86_64-linux-musl-pkg-config --version
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-musl' }}

      # TODO: Rename binary after https://github.com/microsoft/vcpkg/issues/36094 is fixed
      - name: Setup arm64 musl environment
        run: |
          wget -c https://github.com/xmake-mirror/musl.cc/releases/download/20210202/aarch64-linux-musl-cross.linux.tgz -O - | tar -xz
          sudo ln -s ${{ github.workspace }}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-g++ /usr/bin/aarch64-linux-gnu-g++
          sudo ln -s ${{ github.workspace }}/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc /usr/bin/aarch64-linux-gnu-gcc
          aarch64-linux-gnu-gcc --version
          aarch64-linux-gnu-g++ --version
          sudo ln -s ${{ github.workspace }}/vcpkg/cross-pkg-config /usr/bin/aarch64-linux-gnu-pkg-config
          aarch64-linux-gnu-pkg-config --version
        if: ${{ matrix.platform.target == 'aarch64-unknown-linux-musl' }}

      - name: Install ffmpeg build deps
        run: sudo apt-get --assume-yes install nasm
      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
      - name: Build vcpkg dependencies
        run: |
          cargo vcpkg --verbose build --target ${{ matrix.platform.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --rev 085092c
        if: ${{ matrix.platform.command == 'cross' }}

      - name: Build and test
        run: |
          ${{ matrix.platform.command }} build --locked --target ${{ matrix.platform.target }} --profile ${{ steps.target.outputs.profile }}
          ${{ matrix.platform.command }} test --locked --target ${{ matrix.platform.target }} --profile ${{ steps.target.outputs.profile }}
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.target.outputs.docker-arch }}-${{ steps.target.outputs.env }}
          path: ${{ github.workspace }}/target/${{ matrix.platform.target }}/${{ steps.target.outputs.output-dir }}/nghe
          retention-days: 1

  build-docker:
    runs-on: ubuntu-latest
    needs: build-linux
    if: ${{ vars.BUILD_DOCKER != '' }}

    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact for docker
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifact/
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # GNU
      - name: Extract metadata for Docker gnu
        id: meta-gnu
        uses: docker/metadata-action@v5
        with:
          images: |
            name=ghcr.io/${{ github.repository }}-gnu
          tags: |
            type=ref,event=pr
            type=raw,value=develop,enable={{is_default_branch}}
      - name: Build and push gnu
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ci/docker/Dockerfile
          build-args: |
            BASE_IMAGE=debian:12.5-slim
            TARGET_ENV=gnu
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-gnu.outputs.tags }}

      # Musl
      - name: Extract metadata for Docker musl
        id: meta-musl
        uses: docker/metadata-action@v5
        with:
          images: |
            name=ghcr.io/${{ github.repository }}-musl
          tags: |
            type=ref,event=pr
            type=raw,value=develop,enable={{is_default_branch}}
      - name: Build and push musl
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ci/docker/Dockerfile
          build-args: |
            BASE_IMAGE=alpine:3.19.1
            TARGET_ENV=musl
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta-musl.outputs.tags }}

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - uses: cargo-bins/cargo-binstall@main

      - uses: ikalnytskyi/action-setup-postgres@v5
        id: postgres
      - name: Install libpq
        run: |
          vcpkg install libpq[core]:x64-windows-release
          cp "C:/vcpkg/installed/x64-windows-release/lib/*" "C:/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib/"
          cp "C:/vcpkg/installed/x64-windows-release/bin/*" "C:/Users/runneradmin/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/bin/"

      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
      - name: Build vcpkg dependencies
        run: |
          cargo vcpkg --verbose build --target x86_64-pc-windows-msvc

      - name: Build and test
        run: cargo test --locked --target x86_64-pc-windows-msvc
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-apple-darwin
            os: macos-13
            vcpkg-target: x64-osx-release
          - target: aarch64-apple-darwin
            os: macos-14
            vcpkg-target: arm64-osx-release

    runs-on: ${{ matrix.platform.os }}

    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

    steps:
      - uses: actions/checkout@v4
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - uses: cargo-bins/cargo-binstall@main

      - name: Install postgres
        run: brew install postgresql@14
      - uses: ikalnytskyi/action-setup-postgres@v5
        id: postgres

      - name: Install ffmpeg build deps
        run: brew install nasm
      - name: Install cargo-vcpkg
        run: cargo binstall cargo-vcpkg --no-confirm
      - name: Build vcpkg dependencies
        run: |
          cargo vcpkg --verbose build --target ${{ matrix.platform.target }}

      - name: Build and test
        run: cargo test --locked --target ${{ matrix.platform.target }}
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}
